/* -------------------------------------------------------------------------- */
/*                                 QUESTION 1                                 */
/* -------------------------------------------------------------------------- */

- In this part we implement TCP Server and a TCP Client for a simple look-up 
service, in C. 

- The service provides storage and retrieval of (key, value) pairs. 

- Both keys and values are ascii strings with length at most 40 characters.

- We assumption is such that each string includes only alphanumeric characters, 
  without imbedded blanks or punctuation or other special characters. 

- There can be at most one (key, value) pair stored in the system for any 
  particular key.

- Your client should take as command line arguments the host name and port number 
  of the server (or proxy server – see below) that it should connect to, and read 
  commands from standard input. 

/* --------------------- SERVER ARCHITECTURE COMPONENTS --------------------- */

- DATABASE DESIGN DECISION:

  We chose a single store file to store the key value pairs. On a database put
  operation, the file is opened from the command handler library and executes
  the operations based on command provided.


- COMMAND PARSER DESIGN DECISION:

  The server receives the commands from the client over the TCP Socket as
  standard input. Commands are single line and command description are
  documented in TCP SERVER API DOCUMENTATION section.

  All utils functions such as the parser libray functions is being fetch from .so
  file as dynamic libray. On

/* ---------------------- TCP SERVER API DOCUMENTATION ---------------------- */

• Command:      Add item to database
  Usage:        add key value
  Description:  Add (key, value) pair, if no existing pair with same key value

• Command:      Get Item from Database
  Usage:        getvalue key
  Description:  Return value from matching (key, value) pair, if any

• Command:      Get all items
  Usage:        getall
  Description:  Return all (key, value) pairs

• Command:      Remove item from database
  Usage:        remove key
  Description:  Remove matching (key, value) pair, if any

• Command:      Quit Session
  Usage:        quit
  Description:  Terminate client

/* -------------------------------------------------------------------------- */
/*                                 QUESTION 2                                 */
/* -------------------------------------------------------------------------- */

I design and implement a TCP-based “proxy” server. My proxy takes host name and 
port number for server from question 1, which it will need to connect with. 

Proxy server has liking for the lower-case characters “c”, “m”, “p”, and “t”,
and whenever these are encountered in a value returned by the (real) server, 
they are duplicated. For example, the returned value.

/* -------------------------------------------------------------------------- */
/*                                 QUESTION 3                                 */
/* -------------------------------------------------------------------------- */

